import { useState } from 'react';import {  Dialog,  DialogContent,  DialogDescription,  DialogFooter,  DialogHeader,  DialogTitle,} from '@/components/ui/dialog';import { Button } from '@/components/ui/button';import { Badge } from '@/components/ui/badge';import { Alert, AlertDescription } from '@/components/ui/alert';import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';import { useSubscriptions } from '@/hooks/useSubscriptions';import { usePaymentMethods } from '@/hooks/usePaymentMethods';import {   CreditCard,   Calendar,   CheckCircle,   AlertTriangle,   Crown,  Star,  Zap} from 'lucide-react';import { format } from 'date-fns';import { es } from 'date-fns/locale';interface SubscriptionDialogProps {  open: boolean;  onOpenChange: (open: boolean) => void;}export default function SubscriptionDialog({ open, onOpenChange }: SubscriptionDialogProps) {  const {     currentSubscription,     subscriptionHistory,     loading,     subscribe,     changePlan,     cancelSubscription,     reactivateSubscription   } = useSubscriptions();  const { paymentMethods } = usePaymentMethods();    const [selectedPlan, setSelectedPlan] = useState<string | null>(null);  const [showPlanSelector, setShowPlanSelector] = useState(false);  const [showCancelDialog, setShowCancelDialog] = useState(false);  const plans = [    {      id: 'basic',      name: 'Básico',      price: 9.99,      icon: Star,      features: [        'Acceso a contenido estándar',        '1 pantalla simultánea',        'Calidad HD',        'Sin anuncios'      ]    },    {      id: 'standard',      name: 'Estándar',      price: 14.99,      icon: Crown,      features: [        'Acceso a todo el contenido',        '2 pantallas simultáneas',        'Calidad Full HD',        'Sin anuncios',        'Descargas offline'      ]    },    {      id: 'premium',      name: 'Premium',      price: 19.99,      icon: Zap,      features: [        'Acceso a todo el contenido premium',        '4 pantallas simultáneas',        'Calidad 4K',        'Sin anuncios',        'Descargas offline',        'Contenido exclusivo'      ]    }  ];  const getStatusBadge = (status: string) => {    const variants = {      active: 'default',      cancelled: 'destructive',      expired: 'secondary'    } as const;        const labels = {      active: 'Activa',      cancelled: 'Cancelada',      expired: 'Expirada'    };    return (      <Badge variant={variants[status as keyof typeof variants] || 'secondary'}>        {labels[status as keyof typeof labels] || status}      </Badge>    );  };  const getPlanIcon = (planId: string) => {    const plan = plans.find(p => p.id === planId);    if (!plan) return Star;    return plan.icon;  };  const handleSubscribe = async (planId: string) => {    if (paymentMethods.length === 0) {      alert('Necesitas agregar un método de pago primero');      return;    }    const success = await subscribe(planId as 'basic' | 'standard' | 'premium');    if (success) {      setShowPlanSelector(false);      setSelectedPlan(null);    }  };  const handleChangePlan = async (newPlanId: string) => {    if (!currentSubscription) return;        const success = await changePlan(newPlanId as 'basic' | 'standard' | 'premium');    if (success) {      setShowPlanSelector(false);      setSelectedPlan(null);    }  };  const handleCancel = async () => {    if (!currentSubscription) return;        const success = await cancelSubscription();    if (success) {      setShowCancelDialog(false);    }  };  const handleReactivate = async () => {    if (!currentSubscription) return;        await reactivateSubscription();  };  return (    <Dialog open={open} onOpenChange={onOpenChange}>      <DialogContent className="sm:max-w-[700px] max-h-[90vh] overflow-y-auto">        <DialogHeader>          <DialogTitle className="flex items-center gap-2">            <CreditCard className="w-5 h-5" />            Gestión de suscripción          </DialogTitle>          <DialogDescription>            Administra tu plan de suscripción y revisa tu historial          </DialogDescription>        </DialogHeader>        <div className="space-y-6">          {/* Suscripción actual */}          <div className="space-y-4">            <h4 className="font-medium">Suscripción actual</h4>            {currentSubscription ? (              <Card>                <CardContent className="p-4">                  <div className="flex items-center justify-between mb-4">                    <div className="flex items-center gap-3">                      {(() => {                        const IconComponent = getPlanIcon(currentSubscription.plan);                        return <IconComponent className="w-6 h-6 text-primary" />;                      })()}                      <div>                        <h5 className="font-medium">                          Plan {plans.find(p => p.id === currentSubscription.plan)?.name || currentSubscription.plan}                        </h5>                        <p className="text-sm text-muted-foreground">                          ${currentSubscription.price}/mes                        </p>                      </div>                    </div>                    {getStatusBadge(currentSubscription.status)}                  </div>                  <div className="space-y-2 text-sm text-muted-foreground">                    <div className="flex items-center gap-2">                      <Calendar className="w-4 h-4" />                      <span>                        Inicio: {format(new Date(currentSubscription.start_date), "dd 'de' MMMM, yyyy", { locale: es })}                      </span>                    </div>                    {currentSubscription.end_date && (                      <div className="flex items-center gap-2">                        <Calendar className="w-4 h-4" />                        <span>                          {currentSubscription.status === 'cancelled' ? 'Expira' : 'Próximo cobro'}: {format(new Date(currentSubscription.end_date), "dd 'de' MMMM, yyyy", { locale: es })}                        </span>                      </div>                    )}                  </div>                  <div className="flex gap-2 mt-4">                    {currentSubscription.status === 'active' && (                      <>                        <Button                          variant="outline"                          size="sm"                          onClick={() => setShowPlanSelector(true)}                        >                          Cambiar plan                        </Button>                        <Button                          variant="outline"                          size="sm"                          onClick={() => setShowCancelDialog(true)}                        >                          Cancelar suscripción                        </Button>                      </>                    )}                    {currentSubscription.status === 'cancelled' && (                      <Button                        size="sm"                        onClick={handleReactivate}                        disabled={loading}                      >                        Reactivar suscripción                      </Button>                    )}                  </div>                </CardContent>              </Card>            ) : (              <Card>                <CardContent className="p-6 text-center">                  <p className="text-muted-foreground mb-4">No tienes una suscripción activa</p>                  <Button onClick={() => setShowPlanSelector(true)}>                    Ver planes disponibles                  </Button>                </CardContent>              </Card>            )}          </div>          {/* Selector de planes */}          {showPlanSelector && (            <div className="space-y-4">              <h4 className="font-medium">                {currentSubscription ? 'Cambiar plan' : 'Seleccionar plan'}              </h4>              <div className="grid gap-4 md:grid-cols-3">                {plans.map((plan) => {                  const IconComponent = plan.icon;                  const isCurrentPlan = currentSubscription?.plan === plan.id;                                    return (                    <Card                       key={plan.id}                       className={`cursor-pointer transition-all ${                        selectedPlan === plan.id ? 'ring-2 ring-primary' : ''                      } ${isCurrentPlan ? 'opacity-50' : ''}`}                      onClick={() => !isCurrentPlan && setSelectedPlan(plan.id)}                    >                      <CardHeader className="text-center">                        <IconComponent className="w-8 h-8 mx-auto text-primary" />                        <CardTitle className="text-lg">{plan.name}</CardTitle>                        <div className="text-2xl font-bold">${plan.price}<span className="text-sm font-normal">/mes</span></div>                        {isCurrentPlan && (                          <Badge variant="default">Plan actual</Badge>                        )}                      </CardHeader>                      <CardContent>                        <ul className="space-y-2 text-sm">                          {plan.features.map((feature, index) => (                            <li key={index} className="flex items-center gap-2">                              <CheckCircle className="w-4 h-4 text-green-500" />                              {feature}                            </li>                          ))}                        </ul>                      </CardContent>                    </Card>                  );                })}              </div>                            <div className="flex gap-2">                <Button                  variant="outline"                  onClick={() => {                    setShowPlanSelector(false);                    setSelectedPlan(null);                  }}                >                  Cancelar                </Button>                {selectedPlan && (                  <Button                    onClick={() => currentSubscription ? handleChangePlan(selectedPlan) : handleSubscribe(selectedPlan)}                    disabled={loading}                  >                    {loading ? 'Procesando...' : currentSubscription ? 'Cambiar plan' : 'Suscribirse'}                  </Button>                )}              </div>            </div>          )}          {/* Diálogo de confirmación de cancelación */}          {showCancelDialog && (            <Alert>              <AlertTriangle className="w-4 h-4" />              <AlertDescription className="space-y-3">                <p>¿Estás seguro de que quieres cancelar tu suscripción?</p>                <p className="text-sm">                  Podrás seguir disfrutando del servicio hasta el final de tu período de facturación actual.                </p>                <div className="flex gap-2">                  <Button                    variant="outline"                    size="sm"                    onClick={() => setShowCancelDialog(false)}                  >                    No, mantener suscripción                  </Button>                  <Button                    variant="destructive"                    size="sm"                    onClick={handleCancel}                    disabled={loading}                  >                    {loading ? 'Cancelando...' : 'Sí, cancelar'}                  </Button>                </div>              </AlertDescription>            </Alert>          )}          {/* Historial de suscripciones */}          {subscriptionHistory.length > 0 && (            <div className="space-y-4">              <h4 className="font-medium">Historial de suscripciones</h4>              <div className="space-y-3">                {subscriptionHistory.map((sub) => (                  <Card key={sub.id}>                    <CardContent className="p-4">                      <div className="flex items-center justify-between">                        <div className="flex items-center gap-3">                          {(() => {                            const IconComponent = getPlanIcon(sub.plan);                            return <IconComponent className="w-5 h-5 text-muted-foreground" />;                          })()}                          <div>                            <div className="flex items-center gap-2">                              <span className="font-medium">                                Plan {plans.find(p => p.id === sub.plan)?.name || sub.plan}                              </span>                              <Badge variant="secondary" className="text-xs">                                {sub.action === 'subscribed' ? 'Suscrito' :                                  sub.action === 'cancelled' ? 'Cancelado' :                                  sub.action === 'renewed' ? 'Renovado' : 'Actualizado'}                              </Badge>                            </div>                            <div className="text-sm text-muted-foreground">                              {format(new Date(sub.date), "dd 'de' MMMM, yyyy", { locale: es })} - {sub.details}                            </div>                          </div>                        </div>                        <div className="text-right">                          <div className="font-medium">${sub.price}/mes</div>                        </div>                      </div>                    </CardContent>                  </Card>                ))}              </div>            </div>          )}        </div>        <DialogFooter>          <Button variant="outline" onClick={() => onOpenChange(false)}>            Cerrar          </Button>        </DialogFooter>      </DialogContent>    </Dialog>  );}